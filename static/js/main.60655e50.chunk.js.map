{"version":3,"sources":["settings.js","apiFacade.jsx","components/Login.jsx","components/Welcome.jsx","components/Admin.jsx","components/Chef.jsx","components/ShowRoles.jsx","components/Recipes.jsx","components/Ingredients.jsx","App.js","index.js"],"names":["onlineURL","handleHttpErrors","res","ok","json","Promise","reject","status","fullError","returnVal","makeOptions","method","addToken","body","opts","headers","Accept","getToken","JSON","stringify","localStorage","getItem","login","user","pass","setRoles","options","username","password","fetch","URL","then","token","setItem","jwtData","split","decodedJwtJsonData","window","atob","parse","roles","getRole","logout","removeItem","fetchGetData","endpoint","addEditObj","ekstraURL","obj","id","uri","console","log","deleteObj","myPost","ApiFacade","LogIn","message","useState","setUser","onChange","evt","target","value","onSubmit","preventDefault","placeholder","type","className","LoggedIn","Welcome","menu","setMenu","useEffect","facade","catch","err","e","code","AdminPage","CreateItem","emptyItem","name","price_pr_kg","item","errorMessage","setErrorMessage","stockItem","setStockItem","itemButton","setItemButton","itemList","setItemList","storageList","setStorageList","buttonName","Row","Col","event","readOnly","htmlFor","onClick","style","marginLeft","StockItem","setMessage","amount","setAmount","currentTarget","updateStorage","ItemList","Table","map","key","storage","AdminPanel","loggedIn","includes","ChefPage","recipes","setRecipes","initialMenu","recipe_list","year_","week_num","msg","setMsg","filter","setFilter","updateList","names","ingredient_listDTO","forEach","ingredient","itemDTO","push","length","directions","preparation_time","list","handleMenu","CalculateTotalPrice","price","Menu","setYear_","setWeek_num","week","Number","year","index","Chef","Show","prettyRoles","replace","toUpperCase","RecipesPage","emptyRecipe","recipe","setRecipe","newRecipe","AddEditRecipe","Recipes","Ingredients","items","setItems","DropdownButton","title","Dropdown","Item","IngredientsPage","NoMatch","Header","setLoggedIn","exact","activeClassName","to","LogInScreen","ShowRoles","App","path","component","WelcomePage","render","Admin","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.60655e50.chunk.js","sourcesContent":["//This file contains the URLs used in the application\n//Whenever you need an URL to access an endpoint, add it in here\n//and import this file whereever you need the URL\n\nexport const localURL = \"http://localhost:8080/exam\";\nexport const onlineURL = \"https://maltemagnussen.com/exam\";\n","//Change this before deployment (production)\nimport { onlineURL as URL } from \"./settings.js\";\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({ status: res.status, fullError: res.json() });\n  }\n  return res.json();\n}\n\nconst ApiFacade = () => {\n  /**\n   * method = PUT / POST / GET / DELETE\n   * addToken = TRUE / FALSE (logged in or not)\n   * body = Body of the fetch\n   */\n  function makeOptions(method, addToken, body) {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n    return opts;\n  }\n\n  function setToken(token) {\n    localStorage.setItem(\"jwtToken\", token);\n  }\n\n  function getToken() {\n    return localStorage.getItem(\"jwtToken\");\n  }\n\n  function loggedIn() {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  }\n\n  function addEditObj(ekstraURL, obj) {\n    if (obj.id === 0) {\n      // ADD\n      const uri = URL + `/api/${ekstraURL}`;\n      let options = makeOptions(\"POST\", true, obj);\n      fetch(uri, options).then(handleHttpErrors);\n      console.log(\"POST\");\n    } else {\n      // EDIT\n      const uri = URL + `/api/${ekstraURL}`;\n      const options = makeOptions(\"PUT\", true, obj);\n      console.log(\"PUT\");\n      fetch(uri, options).then(handleHttpErrors);\n    }\n  }\n\n  function myPost(ekstraURL, obj) {\n    const uri = URL + `/api/${ekstraURL}`;\n    let options = makeOptions(\"POST\", true, obj);\n    console.log(\"POST\");\n    return fetch(uri, options).then(handleHttpErrors);\n  }\n\n  /**\n   * const uri = `/api/${ekstraURL}/${id}`;\n   * const options = makeOptions(\"DELETE\");\n   * fetch(uri, options).then(handleHttpErrors);\n   * @param {*} ekstraURL\n   * @param {*} id\n   */\n  function deleteObj(ekstraURL, id) {\n    const uri = URL + `/api/${ekstraURL}/${id}`;\n    const options = makeOptions(\"DELETE\", true);\n    fetch(uri, options).then(handleHttpErrors);\n    console.log(\"DELETE\");\n  }\n\n  //   //Remember to always include options from the makeOptions fucntion with >true< as the second parameter\n  //   //if you want to access a protected endpoint\n\n  /**\n   * const fetchGetData = (endpoint, value) => {\n   * const options = makeOptions(\"GET\", true); //True add's the token\n   * return fetch(URL + `/api/${endpoint}/${value}`, options).then(handleHttpErrors);\n   * @param {*} endpoint\n   * @param {*} value\n   */\n  const fetchGetData = endpoint => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n    return fetch(URL + `/api/${endpoint}`, options).then(handleHttpErrors);\n  };\n\n  const getRole = () => {\n    let jwt = localStorage.getItem(\"jwtToken\");\n    let jwtData = jwt.split(\".\")[1];\n    let decodedJwtJsonData = window.atob(jwtData);\n    let decodedJwtData = JSON.parse(decodedJwtJsonData);\n    return decodedJwtData.roles;\n  };\n\n  const login = (user, pass, setRoles) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: pass\n    });\n    return fetch(URL + \"/api/login\", options)\n      .then(handleHttpErrors)\n      .then(res => {\n        setToken(res.token);\n        setRoles(getRole());\n      });\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  return {\n    login,\n    logout,\n    fetchGetData,\n    addEditObj,\n    deleteObj,\n    myPost\n  };\n};\n\nlet returnVal = ApiFacade();\nexport default returnVal;\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const LogIn = ({ login, message }) => {\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\n\n  function log_in(evt) {\n    evt.preventDefault();\n    login(user.username, user.password);\n  }\n\n  const onChange = evt => {\n    setUser({ ...user, [evt.target.id]: evt.target.value });\n  };\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <form onSubmit={log_in}>\n        <input placeholder=\"User Name\" id=\"username\" onChange={onChange} />{\" \"}\n        <input\n          placeholder=\"Password\"\n          id=\"password\"\n          type=\"password\"\n          onChange={onChange}\n        />{\" \"}\n        <button className=\"btn btn-primary\">Login</button>\n        <br></br>\n        <p>{message}</p>\n      </form>\n    </div>\n  );\n};\n\nexport const LoggedIn = () => {\n  return (\n    <>\n      <h2>You are now logged in</h2>\n      <br></br>\n      <br></br>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Welcome.css\";\nimport facade from \"../apiFacade.jsx\";\n\nconst Welcome = () => {\n  const [menu, setMenu] = useState();\n\n  useEffect(() => {\n    // UPDATE ITEMLIST\n    facade\n      .fetchGetData(\"restaurant/week\")\n      .then(res => setMenu(res))\n      .catch(err => {\n        if (err.status) {\n          err.fullError.then(e => {\n            console.log(e.code, e.message);\n          });\n        } else {\n          console.log(\"Network error\");\n        }\n      });\n  }, []);\n\n  return (\n    <>\n      <h1>Welcome to the restaurant! View the Week Menus Below!</h1>\n\n      {menu && JSON.stringify(menu)}\n\n      {\n        // TODO INSERT TABLE WITH WEEK MENUS\n      }\n    </>\n  );\n};\n\nexport default Welcome;\n","import React, { useState, useEffect } from \"react\";\nimport facade from \"../apiFacade.jsx\";\nimport { Table, Row, Col } from \"react-bootstrap\";\n\nconst defaultErrorMessage = \"Fill out all fields before submitting.\";\n\nconst AdminPanel = ({ loggedIn, roles }) => {\n  return (\n    <>\n      {!loggedIn || !roles.includes(\"admin\") ? (\n        <p>You are not logged in as admin</p>\n      ) : (\n        <AdminPage />\n      )}\n    </>\n  );\n};\n\nconst AdminPage = () => {\n  return (\n    <>\n      <CreateItem />\n    </>\n  );\n};\n\nconst CreateItem = () => {\n  const emptyItem = { id: 0, name: \"\", price_pr_kg: 0 };\n  const [item, setItem] = useState({ ...emptyItem });\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [stockItem, setStockItem] = useState();\n  const [itemButton, setItemButton] = useState(false);\n  const [itemList, setItemList] = useState();\n  const [storageList, setStorageList] = useState();\n\n  const handleChange = event => {\n    if (item.name === \"\" || item.price_pr_kg === 0) {\n      setErrorMessage(defaultErrorMessage);\n    } else {\n      setErrorMessage(\"\");\n    }\n    const target = event.target;\n    const id = target.id;\n    const value = target.value;\n    setItem({ ...item, [id]: value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (item.name === \"\" || item.price_pr_kg === 0) {\n      setErrorMessage(defaultErrorMessage);\n      return;\n    }\n    console.log(\"About to submit item\");\n    facade.addEditObj(\"restaurant/item/add\", item);\n    // Empty out the fields and set new item.\n    setItem({ ...emptyItem });\n    setErrorMessage(\"\");\n  };\n\n  // Updates List of items when refresh button is clicked and on load.\n  useEffect(() => {\n    // UPDATE ITEMLIST\n    facade\n      .fetchGetData(\"restaurant/items\")\n      .then(res => setItemList(res))\n      .catch(err => {\n        if (err.status) {\n          err.fullError.then(e => console.log(e.code, e.message));\n        } else {\n          console.log(\"Network error\");\n        }\n      });\n\n    // UPDATE STORAGELIST\n    facade\n      .fetchGetData(\"restaurant/storage\")\n      .then(res => setStorageList(res))\n      .catch(err => {\n        if (err.status) {\n          err.fullError.then(e => console.log(e.code, e.message));\n        } else {\n          console.log(\"Network error\");\n        }\n      });\n  }, [itemButton]);\n\n  const buttonName = item.id === 0 ? \"Save\" : \"Edit\";\n\n  return (\n    <>\n      <br />\n      <Row>\n        <Col>\n          <h3>Add an Item.</h3>\n          {errorMessage !== \"\" && errorMessage}\n          <br />\n          <form className=\"form-horizontal\" onChange={handleChange}>\n            <div className=\"form-group\">\n              <label className=\"control-label col-sm-3\">Id:</label>\n              <div className=\"col-sm-9\">\n                <input\n                  className=\"form-control\"\n                  readOnly={true}\n                  id=\"id\"\n                  value={item.id}\n                />\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label col-sm-3\" htmlFor=\"name\">\n                Name:\n              </label>\n              <div className=\"col-sm-9\">\n                <input\n                  className=\"form-control\"\n                  id=\"name\"\n                  value={item.name}\n                  placeholder=\"Enter Name\"\n                />\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label col-sm-3\" htmlFor=\"age\">\n                Price pr Kg:\n              </label>\n              <div className=\"col-sm-9\">\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"price_pr_kg\"\n                  value={item.price_pr_kg}\n                  placeholder=\"Indtast pris pr kg i ører\"\n                />\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <div className=\"col-sm-offset-3 col-sm-9\">\n                <button\n                  type=\"submit\"\n                  onClick={handleSubmit}\n                  className=\"btn btn-primary\"\n                >\n                  {buttonName}\n                </button>\n                <button\n                  style={{ marginLeft: 5 }}\n                  type=\"button\"\n                  className=\"btn btn-dark\"\n                  onClick={() => {\n                    setItem({ ...emptyItem });\n                  }}\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </form>\n          <p>{JSON.stringify(item)}</p>\n        </Col>\n        <Col>\n          <StockItem stockItem={stockItem} />\n        </Col>\n      </Row>\n\n      <br />\n      <ItemList\n        setItemButton={setItemButton}\n        itemButton={itemButton}\n        itemList={itemList}\n        storageList={storageList}\n        setStockItem={setStockItem}\n      />\n    </>\n  );\n};\n\nconst StockItem = ({ stockItem }) => {\n  const [message, setMessage] = useState(\"\");\n  const [amount, setAmount] = useState();\n\n  const updateStorage = (id, amount) => {\n    facade\n      .fetchGetData(\"restaurant/storage/\" + id + \"/\" + amount)\n      .then(res => setMessage(res))\n      .catch(err => {\n        if (err.status) {\n          err.fullError.then(e => console.log(e.code, e.message));\n        } else {\n          console.log(\"Network error\");\n        }\n      });\n  };\n\n  return (\n    <>\n      <h3>Stock an Item</h3>\n      {message && JSON.stringify(message)}\n      <br />\n      {stockItem && (\n        <>\n          How many of {stockItem.name} would you like to Stock?\n          <br />\n          <input\n            type=\"number\"\n            placeholder=\"Amount you'd like to update the stock to.\"\n            onChange={e => {\n              setAmount(e.currentTarget.value);\n            }}\n          ></input>\n          <button\n            className=\"btn btn-success\"\n            onClick={() => {\n              setMessage(\"\");\n              updateStorage(stockItem.id, amount);\n            }}\n          >\n            Update Stock\n          </button>\n        </>\n      )}\n      <br />\n      Stock Amount: {JSON.stringify(amount)}\n      <br />\n      {JSON.stringify(stockItem)}\n    </>\n  );\n};\n\nconst ItemList = ({\n  setItemButton,\n  itemButton,\n  itemList,\n  storageList,\n  setStockItem\n}) => {\n  return (\n    <>\n      <button\n        className=\"btn btn-primary\"\n        type=\"button\"\n        onClick={() => setItemButton(!itemButton)}\n      >\n        Refresh Item List.\n      </button>\n      <br />\n      <Row>\n        <Col>\n          <h5>Item Table</h5>\n          {itemList && (\n            <Table>\n              <thead>\n                <tr>\n                  <th>id</th>\n                  <th>name</th>\n                  <th>Price per KG</th>\n                  <th>Stock this item</th>\n                </tr>\n              </thead>\n              <tbody>\n                {itemList.map(item => (\n                  <tr key={item.id}>\n                    <td>{item.id}</td>\n                    <td>{item.name}</td>\n                    <td>{item.price_pr_kg}</td>\n                    <td>\n                      <button\n                        className=\"btn btn-success\"\n                        onClick={() => setStockItem(item)}\n                      >\n                        Add Stock\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n          <p>ITEM LIST: {JSON.stringify(itemList)}</p>\n        </Col>\n        <Col>\n          <h5>Storage Table</h5>\n          {storageList && (\n            <Table>\n              <thead>\n                <tr>\n                  <th>id</th>\n                  <th>name</th>\n                  <th>Amount in Stock</th>\n                </tr>\n              </thead>\n              <tbody>\n                {storageList.map(storage => (\n                  <tr key={storage.id}>\n                    <td>{storage.id}</td>\n                    <td>{storage.item.name}</td>\n                    <td>{storage.amount}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n          <p>STORAGE LIST: {JSON.stringify(storageList)}</p>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default AdminPanel;\n","import React, { useState, useEffect } from \"react\";\r\nimport facade from \"../apiFacade.jsx\";\r\nimport { Table, Row, Col } from \"react-bootstrap\";\r\n\r\n/**\r\n * DONE HERE:\r\n * - The Chef should be able to see a list of all recipes\r\n * - The Chef should be able to choose 7 recipes.\r\n * - When a recipe is chosen the app should check that all ingredients are available in storage or otherwise give a warning.\r\n */\r\nconst Chef = ({ loggedIn }) => {\r\n  return <>{!loggedIn ? <p>You are not logged in</p> : <ChefPage />}</>;\r\n};\r\n\r\nconst ChefPage = () => {\r\n  const [recipes, setRecipes] = useState();\r\n\r\n  const initialMenu = {\r\n    recipe_list: [],\r\n    year_: 0,\r\n    week_num: 0,\r\n    id: 0\r\n  };\r\n\r\n  const [menu, setMenu] = useState(initialMenu);\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  // Updates List of items when refresh button is clicked and on load.\r\n  useEffect(() => {\r\n    updateList();\r\n  }, []);\r\n\r\n  const updateList = () => {\r\n    // UPDATE ITEMLIST\r\n    facade\r\n      .fetchGetData(\"restaurant/recipe\")\r\n      .then(res => setRecipes(res))\r\n      .catch(err => {\r\n        if (err.status) {\r\n          err.fullError.then(e => console.log(e.code, e.message));\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n  };\r\n\r\n  /*\r\n  \"ingredient_listDTO\":[{\"amount\":20,\"id\":7,\"itemDTO\":{\"id\":2,\"name\":\"ris\",\"price_pr_kg\":\"1000\"}},{\"amount\":70,\"id\":11,\"itemDTO\":{\"id\":7,\"name\":\"laks\",\"price_pr_kg\":\"10000\"}},{\"amount\":10,\"id\":15,\"itemDTO\":{\"id\":3,\"name\":\"kartofler\",\"price_pr_kg\":\"900\"}}] \r\n  */\r\n  const MyFilter = () => {\r\n    setRecipes(\r\n      recipes.filter(item => {\r\n        let names = [];\r\n        item.ingredient_listDTO.forEach(ingredient => {\r\n          if (ingredient.itemDTO.name === filter)\r\n            names.push(ingredient.itemDTO.name);\r\n        });\r\n        if (names.length > 0) return item; // This is really hacky, but it works. I was kinda tired at this point.\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleMenu = item => {\r\n    if (menu.recipe_list.length >= 7) {\r\n      return;\r\n    }\r\n\r\n    facade\r\n      .myPost(\"restaurant/recipe/check\", item.ingredient_listDTO)\r\n      .then(res => setMsg(res.message))\r\n      .catch(err => {\r\n        if (err.status) {\r\n          err.fullError.then(e => {\r\n            console.log(e.code, e.message);\r\n            setMsg(e.message);\r\n          });\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n\r\n    let list = [...menu.recipe_list];\r\n    list.push(item);\r\n    setMenu({ ...menu, recipe_list: list });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Welcome to the Chefs interface.</h1>\r\n      <h2>{msg}</h2>\r\n      <Row>\r\n        <Col>\r\n          <h5>Item Table</h5>\r\n          <h6>Filter by ingredient.</h6>\r\n          <input\r\n            type=\"text\"\r\n            value={filter}\r\n            onChange={e => setFilter(e.target.value)}\r\n            placeholder=\"Search for ingredients\"\r\n          ></input>\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={MyFilter}>\r\n            Filter\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={updateList}\r\n          >\r\n            Cancel Filter\r\n          </button>\r\n          {recipes && (\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Name</th>\r\n                  <th>Directions</th>\r\n                  <th>Prep Time in seconds</th>\r\n                  <th>Total Price</th>\r\n                  <th>Put in Menu</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {recipes.map(item => (\r\n                  <tr key={item.id}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.directions}</td>\r\n                    <td>{item.preparation_time}</td>\r\n                    <td>\r\n                      <CalculateTotalPrice item={item} />\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => handleMenu(item)}\r\n                      >\r\n                        Add\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n\r\n          <br />\r\n\r\n          {JSON.stringify(recipes)}\r\n        </Col>\r\n        <Col>\r\n          <br />\r\n          <Menu\r\n            menu={menu}\r\n            setMenu={setMenu}\r\n            initialMenu={initialMenu}\r\n            setMsg={setMsg}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nconst CalculateTotalPrice = ({ item }) => {\r\n  let price = 0;\r\n  item.ingredient_listDTO.map(\r\n    item => (price = price + item.amount * item.itemDTO.price_pr_kg)\r\n  );\r\n  price = price / 100;\r\n  return <>{price}.-</>;\r\n};\r\n\r\nconst Menu = ({ menu, setMenu, initialMenu, setMsg }) => {\r\n  const [year_, setYear_] = useState(0);\r\n  const [week_num, setWeek_num] = useState(0);\r\n\r\n  const week = [\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n    \"Sunday\"\r\n  ];\r\n\r\n  const handleSubmit = () => {\r\n    setMenu({ ...menu, week_num: Number(week_num), year: Number(year_) });\r\n\r\n    facade.addEditObj(\"restaurant/week/add\", menu);\r\n\r\n    setMenu({ ...initialMenu });\r\n\r\n    setMsg(\"Menu submitted. See it on the frontpage.\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>The Menu for Next Week: </h3>\r\n      <h4>Max 7 items in menu.</h4>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-danger\"\r\n        onClick={() => setMenu({ ...initialMenu })}\r\n      >\r\n        Empty Menu List.\r\n      </button>\r\n      <br />\r\n      Set Week Number:{\" \"}\r\n      <input\r\n        type=\"number\"\r\n        value={week_num}\r\n        onChange={e => setWeek_num(e.target.value)}\r\n        placeholder=\"Week Number\"\r\n      ></input>\r\n      <br />\r\n      Set Year:{\" \"}\r\n      <input\r\n        type=\"number\"\r\n        value={year_}\r\n        onChange={e => setYear_(e.target.value)}\r\n        placeholder=\"Week Number\"\r\n      ></input>\r\n      <br />\r\n      <button type=\"button\" onClick={handleSubmit}>\r\n        Submit Week Menu\r\n      </button>\r\n      <br />\r\n      <h5>Menu Table</h5>\r\n      {menu && (\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>Weekday</th>\r\n              <th>Name</th>\r\n              <th>Directions</th>\r\n              <th>Prep Time in seconds</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {menu.recipe_list.map((item, index) => (\r\n              <tr key={item.id}>\r\n                <td>{week[index]}</td>\r\n                <td>{item.name}</td>\r\n                <td>{item.directions}</td>\r\n                <td>{item.preparation_time}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n      <br />\r\n      {JSON.stringify(menu)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chef;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Show = ({ roles }) => {\n    let prettyRoles = roles;\n    prettyRoles = prettyRoles.replace(/\\[|\\]|\\\"/g, '').replace(',', ' & ').toUpperCase();\n\n    return (\n        <p>Permission: {prettyRoles}</p>\n    );\n};\n\nexport default Show;","import React, { useState, useEffect } from \"react\";\r\nimport facade from \"../apiFacade.jsx\";\r\nimport { Table, Row, Col } from \"react-bootstrap\";\r\n\r\nconst Recipes = ({ loggedIn, roles }) => {\r\n  return (\r\n    <>\r\n      {!loggedIn || !roles.includes(\"admin\") ? (\r\n        <p>You are not logged in as admin</p>\r\n      ) : (\r\n        <RecipesPage />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst RecipesPage = () => {\r\n  const [recipes, setRecipes] = useState();\r\n  const [itemButton, setItemButton] = useState(false);\r\n  const [msg, setMsg] = useState(\"\");\r\n  const emptyRecipe = {\r\n    directions: \"\",\r\n    id: 0,\r\n    ingredient_listDTO: [],\r\n    name: \"\",\r\n    preparation_time: 0\r\n  };\r\n  const [recipe, setRecipe] = useState({ ...emptyRecipe });\r\n\r\n  // Updates List of items when refresh button is clicked and on load.\r\n  useEffect(() => {\r\n    // UPDATE ITEMLIST\r\n    facade\r\n      .fetchGetData(\"restaurant/recipe\")\r\n      .then(res => setRecipes(res))\r\n      .catch(err => {\r\n        if (err.status) {\r\n          err.fullError.then(e => console.log(e.code, e.message));\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n  }, [itemButton]);\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <Row>\r\n        <Col>\r\n          <h5>Item Table</h5>\r\n          {recipes && (\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <th>ID</th>\r\n                  <th>Name</th>\r\n                  <th>Directions</th>\r\n                  <th>Prep Time in seconds</th>\r\n                  <th>Edit</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {recipes.map(item => (\r\n                  <tr key={item.id}>\r\n                    <td>{item.id}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.directions}</td>\r\n                    <td>{item.preparation_time}</td>\r\n                    <td>\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => setRecipe(item)}\r\n                      >\r\n                        EDIT\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n          <br />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => setItemButton(!itemButton)}\r\n          >\r\n            Refresh list\r\n          </button>\r\n          <br />\r\n          {JSON.stringify(recipe)}\r\n        </Col>\r\n        <Col>\r\n          <AddEditRecipe\r\n            newRecipe={recipe}\r\n            emptyRecipe={emptyRecipe}\r\n            setMsg={setMsg}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst AddEditRecipe = ({ newRecipe, emptyRecipe, setMsg }) => {\r\n  const [recipe, setRecipe] = useState({ ...newRecipe });\r\n\r\n  const handleChange = event => {\r\n    const target = event.target;\r\n    const id = target.id;\r\n    const value = target.value;\r\n    setRecipe({ ...recipe, [id]: value });\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    if (\r\n      recipe.name === \"\" ||\r\n      recipe.directions === \"\" ||\r\n      recipe.preparation_time === 0\r\n    ) {\r\n      setMsg(\"You must fill all fields before editing or submitting.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"About to submit recipe\");\r\n    facade.addEditObj(\"restaurant/recipe\", recipe);\r\n    // Empty out the fields and set new recipe.\r\n    setRecipe({ ...emptyRecipe });\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    facade.deleteObj(\"restaurant/recipe\", recipe.id);\r\n    setRecipe({ ...emptyRecipe });\r\n  };\r\n\r\n  useEffect(\r\n    () =>\r\n      setRecipe({\r\n        ...newRecipe\r\n      }),\r\n    [newRecipe]\r\n  );\r\n\r\n  const buttonName = recipe.id === 0 ? \"Save\" : \"Edit\";\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"form-horizontal\" onChange={handleChange}>\r\n        <div className=\"form-group\">\r\n          <label className=\"control-label col-sm-3\">Id:</label>\r\n          <div className=\"col-sm-9\">\r\n            <input\r\n              className=\"form-control\"\r\n              readOnly\r\n              id=\"id\"\r\n              value={recipe.id}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label className=\"control-label col-sm-3\" htmlFor=\"name\">\r\n            Name:\r\n          </label>\r\n          <div className=\"col-sm-9\">\r\n            <input\r\n              className=\"form-control\"\r\n              id=\"name\"\r\n              value={recipe.name}\r\n              placeholder=\"Enter Name\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label className=\"control-label col-sm-3\" htmlFor=\"age\">\r\n            Directions:\r\n          </label>\r\n          <div className=\"col-sm-9\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"directions\"\r\n              value={recipe.directions}\r\n              placeholder=\"Enter age\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label className=\"control-label col-sm-3\" htmlFor=\"email\">\r\n            Preparation Time:\r\n          </label>\r\n          <div className=\"col-sm-9\">\r\n            <input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              id=\"preparation_time\"\r\n              value={recipe.preparation_time}\r\n              placeholder=\"Enter email\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <div className=\"col-sm-offset-3 col-sm-9\">\r\n            <button\r\n              type=\"submit\"\r\n              onClick={handleSubmit}\r\n              className=\"btn btn-success\"\r\n            >\r\n              {buttonName}\r\n            </button>\r\n            <button\r\n              style={{ marginLeft: 5 }}\r\n              type=\"button\"\r\n              className=\"btn btn-dark\"\r\n              onClick={() => {\r\n                setRecipe({ ...emptyRecipe });\r\n              }}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              style={{ marginLeft: 5 }}\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={handleDelete}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <p>{JSON.stringify(recipe)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport facade from \"../apiFacade.jsx\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\n\r\nconst IngredientsPage = ({ loggedIn, roles }) => {\r\n  return (\r\n    <>\r\n      {!loggedIn || !roles.includes(\"admin\") ? (\r\n        <p>You are not logged in as admin</p>\r\n      ) : (\r\n        <Ingredients />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Ingredients = () => {\r\n  const [recipes, setRecipes] = useState();\r\n  const [items, setItems] = useState();\r\n  const [itemButton, setItemButton] = useState(false);\r\n  const emptyRecipe = {\r\n    directions: \"\",\r\n    id: 0,\r\n    ingredient_listDTO: [],\r\n    name: \"\",\r\n    preparation_time: 0\r\n  };\r\n  const [recipe, setRecipe] = useState({ ...emptyRecipe });\r\n  const [item, setItem] = useState();\r\n  const [amount, setAmount] = useState();\r\n\r\n  const submitIngredient = () => {\r\n    // ingredient/{itemId}/{amount}/{recipeId}\r\n    // POST\r\n    facade.myPost(\r\n      \"restaurant/ingredient/\" +\r\n        item.id +\r\n        \"/\" +\r\n        Number(amount) +\r\n        \"/\" +\r\n        recipe.id\r\n    );\r\n  };\r\n\r\n  // Updates Lists of items when refresh button is clicked and on load.\r\n  useEffect(() => {\r\n    // UPDATE ITEMLISTS\r\n    facade\r\n      .fetchGetData(\"restaurant/recipe\")\r\n      .then(res => setRecipes(res))\r\n      .catch(err => {\r\n        if (err.status) {\r\n          err.fullError.then(e => console.log(e.code, e.message));\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n\r\n    facade\r\n      .fetchGetData(\"restaurant/items\")\r\n      .then(res => setItems(res))\r\n      .catch(err => {\r\n        if (err.status) {\r\n          err.fullError.then(e => console.log(e.code, e.message));\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n  }, [itemButton]);\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <h5>Make ingredient.</h5>\r\n      {recipes && items && (\r\n        <>\r\n          <DropdownButton id=\"recipes\" title=\"Choose Recipe\">\r\n            {recipes.map(recipe => (\r\n              <Dropdown.Item key={recipe.id} onClick={() => setRecipe(recipe)}>\r\n                {recipe.name}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </DropdownButton>{\" \"}\r\n          Recipe name: {recipe && recipe.name}\r\n          <br />\r\n          <DropdownButton id=\"items\" title=\"Choose Items\">\r\n            {items.map(item => (\r\n              <Dropdown.Item key={item.id} onClick={() => setItem(item)}>\r\n                {item.name}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </DropdownButton>{\" \"}\r\n          Item name: {item && item.name}\r\n          <br />\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Input amount\"\r\n            value={amount}\r\n            onChange={e => setAmount(e.target.value)}\r\n          ></input>\r\n        </>\r\n      )}\r\n      <br />\r\n      <br />\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-success\"\r\n        onClick={submitIngredient}\r\n      >\r\n        Submit Ingredient\r\n      </button>\r\n      <br />\r\n      <br />\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        onClick={() => setItemButton(!itemButton)}\r\n      >\r\n        Refresh list\r\n      </button>\r\n      <br />\r\n      {JSON.stringify(recipe)}\r\n      <br />\r\n      {JSON.stringify(item)}\r\n      <br />\r\n      {JSON.stringify(amount)}\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IngredientsPage;\r\n","import React, { useState } from \"react\";\nimport facade from \"./apiFacade\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { LogIn, LoggedIn } from \"./components/Login.jsx\";\nimport WelcomePage from \"./components/Welcome.jsx\";\nimport Admin from \"./components/Admin.jsx\";\nimport Chef from \"./components/Chef.jsx\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Link\n} from \"react-router-dom\";\nimport ShowRoles from \"./components/ShowRoles.jsx\";\nimport Recipes from \"./components/Recipes.jsx\";\nimport IngredientsPage from \"./components/Ingredients.jsx\";\n\nconst App = () => {\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [roles, setRoles] = useState([]);\n  return (\n    <>\n      <Router>\n        <Header\n          loggedIn={loggedIn}\n          setLoggedIn={setLoggedIn}\n          roles={roles}\n          setRoles={setRoles}\n        />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={WelcomePage} />\n            <Route\n              path=\"/login\"\n              render={() => (\n                <LogInScreen\n                  loggedIn={loggedIn}\n                  setLoggedIn={setLoggedIn}\n                  roles={roles}\n                  setRoles={setRoles}\n                />\n              )}\n            />\n            <Route path=\"/admin\">\n              <Admin loggedIn={loggedIn} roles={roles} />\n            </Route>\n            <Route path=\"/adminrecipes\">\n              <Recipes loggedIn={loggedIn} roles={roles} />\n            </Route>\n            <Route path=\"/chef\">\n              <Chef loggedIn={loggedIn} />\n            </Route>\n            <Route path=\"/ingredients\">\n              <IngredientsPage loggedIn={loggedIn} roles={roles} />\n            </Route>\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n};\n\nconst NoMatch = () => (\n  <div>You're trying to access a resource that doesn't exist.</div>\n);\n\nconst Header = ({ loggedIn, setLoggedIn, roles, setRoles }) => {\n  return (\n    <ul className=\"header\">\n      <li>\n        <NavLink exact activeClassName=\"active\" to=\"/\">\n          Home\n        </NavLink>\n      </li>\n\n      {/*Login / logout start*/}\n      {!loggedIn ? (\n        <li>\n          <NavLink activeClassName=\"active\" to=\"/login\">\n            Login\n          </NavLink>\n        </li>\n      ) : (\n        <li>\n          <NavLink\n            onClick={() => {\n              setLoggedIn(false);\n              facade.logout();\n              setRoles([]);\n            }}\n            to=\"/login\"\n          >\n            Log out\n          </NavLink>\n        </li>\n      )}\n      {/*Login / logout end*/}\n\n      {loggedIn && (\n        <li>\n          <NavLink to=\"/chef\">Chef panel</NavLink>\n        </li>\n      )}\n      {loggedIn && roles.includes(\"admin\") && (\n        <li>\n          <NavLink to=\"/admin\">Admin - Items</NavLink>\n        </li>\n      )}\n      {loggedIn && roles.includes(\"admin\") && (\n        <li>\n          <NavLink to=\"/adminrecipes\">Admin - Recipes</NavLink>\n        </li>\n      )}\n      {loggedIn && roles.includes(\"admin\") && (\n        <li>\n          <NavLink to=\"/ingredients\">Admin - Ingredients</NavLink>\n        </li>\n      )}\n    </ul>\n  );\n};\n\nconst LogInScreen = ({ loggedIn, setLoggedIn, roles, setRoles }) => {\n  const [message, setMessage] = useState(\"\");\n  const login = (user, pass) => {\n    facade\n      .login(user, pass, setRoles)\n      .then(res => {\n        setMessage(\"\");\n        setLoggedIn(true);\n      })\n      .catch(err => {\n        if (err.status) {\n          setMessage(\"Failed to log in, check your information\");\n          err.fullError.then(e => console.log(e.code, e.message));\n        } else {\n          console.log(\"Network error\");\n        }\n      });\n  };\n\n  return (\n    <div>\n      {!loggedIn ? (\n        <LogIn login={login} message={message} />\n      ) : (\n        <div>\n          {roles.length && (\n            <>\n              <ShowRoles roles={roles} />\n              <LoggedIn />\n            </>\n          )}\n        </div>\n      )}\n      <br></br>\n      <Link to=\"/\">Back to WelcomePage</Link>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}